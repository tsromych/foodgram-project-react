name: Main Foodgram workflow

on: [push, pull_request]

jobs:
  tests:
    name: Linters and tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r ./backend/requirements.txt

    - name: Test with flake8
      # env:
      #   POSTGRES_USER: foodgram_user
      #   POSTGRES_PASSWORD: foodgram_password
      #   POSTGRES_DB: foodgram
      #   DB_HOST: 127.0.0.1
      #   DB_PORT: 5432
      run: |
        python -m flake8 backend/
      # cd backend/
      # python manage.py test

  build_and_push_to_docker_hub:
    if: ${{ github.event_name == 'push' }} && ${{ github.ref == 'refs/heads/main' }}
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
        
      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  # build_and_push_frontend_to_docker_hub:
  #   if: ${{ github.event_name == 'push' }} && ${{ github.ref == 'refs/heads/main' }}
  #   name: Push frontend Docker image to DockerHub
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  
  deploy:
    if: ${{ github.event_name == 'push' }} && ${{ github.ref == 'refs/heads/main' }}
    name: Deploy to Yandex.Cloud
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub

    steps:
      # - name: Checkout repo
      #   uses: actions/checkout@v3

      # - name: Copy docker-compose.yml via ssh
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     passphrase: ${{ secrets.SSH_PASSPHRASE }}
      #     source: "infra/docker-compose.production.yml"
      #     target: "foodgram"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/foodgram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static/. /static/
    
  send_message:
    name: Send message to Telegram
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой Foodgram успешно выполнен!